<FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:local="clr-namespace:BookReaderDemo.Pages"
              ColumnWidth="400" FontSize="14" FontFamily="Georgia">
    <Paragraph>
        Что вам, как разработчику, предлагает WPF?
        Использование традиционных языков .NET-платформы - C# и VB.NET
        для создания логики приложения
        Возможность декларативного определения графического интерфейса с помощью специального
        языка разметки XAML, основанном на xml и представляющем альтернативу программному созданию
        графики и элементов управления, а также возможность комбинировать XAML и C#/VB.NET
        Независимость от разрешения экрана: поскольку в WPF все элементы измеряются в независимых
        от устройства единицах, приложения на WPF легко масштабируются под разные экраны с разным 
        разрешением.
        Новые возможности, которых сложно было достичь в WinForms, например, создание трехмерных моделей,
        привязка данных, использование таких элементов, как стили, шаблоны, темы и др.
           Хорошее взаимодействие с WinForms, благодаря чему, например, в приложениях WPF можно
        использовать традиционные элементы управления из WinForms.
        Богатые возможности по созданию различных приложений: это и мультимедиа, и двухмерная и трехмерная
        графика, и богатый набор встроенных элементов управления, а также возможность самим создавать новые
        элементы, создание анимаций, привязка данных, стили, шаблоны, темы и многое другое
        Аппаратное ускорение графики - вне зависимости от того, работаете ли вы с 2D или 3D, графикой
        или текстом, все компоненты приложения транслируются в объекты, понятные Direct3D, и затем
        визуализируются с помощью процессора на видеокарте, что повышает производительность, делает 
        графику более плавной.
        Создание приложений под множество ОС семейства Windows - от Windows XP до Windows 10
        В тоже время WPF имеет определенные ограничения. Несмотря на поддержку трехмерной визуализации, для создания приложений с большим количеством трехмерных изображений, прежде всего игр, лучше использовать другие средства - DirectX или специальные фреймворки, такие как Monogame или Unity.

Также стоит учитывать, что по сравнению с приложениями на Windows Forms объем программ на WPF и потребление ими памяти в процессе работы в среднем несколько выше. Но это с лихвой компенсируется более широкими графическими возможностями и провышенной производительностью при отрисовке графики.
    </Paragraph>
</FlowDocument>
